import javafx.beans.property.DoubleProperty;
import javafx.scene.Node;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;

public class NewCenterPane extends Pane {
	CenterPane center;
	Node[][] root = new Node[10][10];
	DoubleProperty xlength;
	DoubleProperty ylength;

	NewCenterPane(NewLevel lvl) {
		Image img = new Image("ist.png");
		Image img1 = new Image("mersin.png");
		Image img2 = new Image("city1.png");
		Image img3 = new Image("city2.png");
		Image img4 = new Image("city3.png");
		Image img5 = new Image("city4.png");
		Image img6 = new Image("fixedcellsign.jpg");
		Image[] imgarr = { img, img1, img2, img3, img4, img5 };
		int rectangleCount = 10;
		int i = 0, a = 0, b = 0, index = 0;
		for (int row = 0; row < rectangleCount; row++) {
			for (int col = 0; col < rectangleCount; col++) {
				if (a == lvl.cities.size())
					break;
				if (!(lvl.fixedCells.size() == b)) {
					ImageView iv = new ImageView(img6);
					iv.setFitWidth(35);
					iv.setFitHeight(35);
					root[(lvl.fixedCells.get(b) % 10) - 1][(lvl.fixedCells.get(b)) / 10] = iv;
					b++;
				}
				if (lvl.cities.get(a).getLocId() == i) { // koordinatların tam olması için 1 den çıkartmıyoruz
					CityButton cB = new CityButton(lvl.cities.get(a).getName(), imgarr[(int) (Math.random() * 6)],
							(lvl.cities.get(a).getLocId() % 10 == 0 ? (lvl.cities.get(a).getLocId() % 10) + 8
									: (lvl.cities.get(a).getLocId() % 10)),
							(lvl.cities.get(a).getLocId() % 10 == 0) ? (lvl.cities.get(a).getLocId() / 10)
									: (lvl.cities.get(a).getLocId()) / 10 + 1,
							lvl, a);
					// bazilarini buranin ustunde silmis olabilirim
					// forNextCity = cB;
					// buttons[index++] =cB;
					if (lvl.cities.get(a).getLocId() % 10 == 0) {
						root[(lvl.cities.get(a).getLocId() % 10) + 9][(lvl.cities.get(a).getLocId() / 10) - 1] = cB
								.cityButton();

					} else {
						root[(lvl.cities.get(a).getLocId() % 10) - 1][(lvl.cities.get(a).getLocId() / 10)] = cB
								.cityButton();
					}
					row = 0;
					col = 0;
					a++;
					i = 0;

				} else
					i++;
			}

		}
		this.setPrefSize(400, 400);

		int rowCount = 10;
		int columnCount = 10;
		double cellWidth = this.getPrefWidth() / columnCount;
		double cellHeight = this.getPrefHeight() / rowCount;

		for (int row = 0; row < rowCount; row++) {
			for (int col = 0; col < columnCount; col++) {
				if (root[row][col] != null) {
					Rectangle rect = new Rectangle();
					rect.setFill(Color.WHITE);
					rect.setStroke(Color.BLACK);
					rect.setWidth(cellWidth);
					rect.setHeight(cellHeight);
					rect.setLayoutX(col * cellWidth);
					rect.setLayoutY(row * cellHeight);
					this.getChildren().add(rect);
				} else {
					Node willAdded = root[row][col];					
					if(willAdded == null)
						System.out.println("hay amk");
					this.getChildren().add(willAdded);
	
				}

			}
		}

	}

	public CenterPane createCenterPane() {
		return center;
	}

	public void createLine() {

	}

}
